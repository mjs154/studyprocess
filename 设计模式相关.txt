创建模式-单例模式
(1)普通单例类创建：
public class Singleton        
{        
    private static Singleton instance = new Singleton();        
    private Singleton(){        
        …        
    }        
    public static Singleton getInstance(){        
             return instance;         
    }        
}
缺点：实例已经创建，但是消耗资源。
(2)惰性加载创建：
public class Singleton{        
    private static Singleton instance = null;        
    private Singleton(){        
        …        
    }        
    public static Singleton getInstance(){        
        if (instance == null)        
            instance = new Singleton();         
                return instance;         
    }        
}
缺点：多线程避免不了同时new两个实例；
(3)Class锁机制
public class Singleton{        
    private static Singleton instance = null;        
    private Singleton(){        
        …        
    }        
    public static synchronized Singleton getInstance(){        
    	if (instance == null)        
    		instance = new Singleton();         
    	return instance;         
    }        
}
缺点:影响性能每次调用getInstance都必须获得Singleton的锁，但
(4)double-checked locking
public class Singleton{        
    private static Singleton instance = null;        
    private Singleton(){        
        …        
    }        
    public static Singleton getInstance(){        
    	if (instance == null)        
           synchronized(instance){        
              if(instance == null)        
                  instance = new Singleton();        
              }        
        return instance;         
    }       
}
工作原理：
首先当一个线程发出请求后，会先检查instance是否为null，如果不是则直接返回其内容。
当并发访问时，必会有一线程先执行创建，后续线程非空不会创建。
缺点：
  A、B线程先后执行，JVM给A分配空间但未new，直接返回。B线程进入会出错；
(5)完美解决：
public class Singleton{        
    private Singleton(){        
        …        
    }        
    private static class SingletonContainer{        
        private static Singleton instance = new Singleton();        
    }        
    public static Singleton getInstance(){        
        return SingletonContainer.instance;        
    }        
}
原理：(内部类只在需要的时候才会被类加载器加载，实现了懒加载)JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担心3.2中的问题。此外该方法也只会在第一次调用的时候使用互斥机制。最后instance是在第一次加载SingletonContainer类时被创建的，而SingletonContainer类则在调用getInstance方法的时候才会被加载，因此也实现了惰性加载。

代理模式
远程代理实现原理(RMI，具体见RMI)。
